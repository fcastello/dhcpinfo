#!/usr/bin/python
# Author: Francisco Castello
# script: dhcpinfo.py
#     This scripts helps to parse the dhcpd.leases file
#     generated by isc-dhcp-server to make the output
#     more human readable
#  Tested with isc-dhcp-server 4.2.4




import os
import re


#Dhcp Lease Class
class DhcpLease:
    """DHCP lease class"""
    IP = 0
    MAC = 0
    StartDate = 0
    EndDate = 0    
    State = 'Free'
    
    def __init__(self, ip , mac , SDate, EDate, state):
         self.IP = ip
         self.MAC = mac
         self.StartDate = SDate
         self.EndDate = EDate
         self.State = state

    def PrintLease(self):
        print("{}\t{}\t{}\t{}\t {}".format(self.IP,self.MAC,self.StartDate,self.EndDate,self.State))
    

    
class IscDhcpLeases:
    """Class to Save and iterate leases from a file """
    #Lease File default /var/lib/dhcp/dhcpd.leases
    IscDhcpLeaseFile = "/var/lib/dhcp/dhcpd.leases"
    # List of all leases Current Leases
    IscDhcpLeases = []
    # List of all leases extracted in raw format from file
    IscDhcpLeasesRaw = []
    
    
    #Constructor
    def __init__(self, DhcpLeaseFile):
        command = 'cat {}'.format(DhcpLeaseFile)
        cmdText = os.popen(command).read()
        text = r"""%s""" % cmdText
        self.IscDhcpLeasesRaw = re.findall('lease [0-9]*.[0-9]*.[0-9]*.[0-9]* {.*?}',text,re.DOTALL)
        self.ParseLeases()

    #Method to parse all the leases
    def ParseLeases(self):
        #here we loop backwards because the file gets apended with updates and the newest
        #information is valid from top to bottom
        for LeaseRaw in self.IscDhcpLeasesRaw:
            # Get the IP from the lease
            IPraw = re.findall('lease ([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*) {',LeaseRaw,re.DOTALL)
            # find if the IP is already added to the CURRENT lease list
            if not self.FindCurrentIp(IPraw[0]):
                MACraw = re.findall('hardware ethernet ([a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2}:[a-fA-F0-9]{2});',LeaseRaw,re.DOTALL)
                if not MACraw:
                    MAC=None
                else:
                    MAC=MACraw[0]
                STARTraw = re.findall('starts [0-9] ([0-9]{4}\/[0-9]{2}\/[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2})',LeaseRaw,re.DOTALL)
                ENDSraw = re.findall('ends [0-9] ([0-9]{4}\/[0-9]{2}\/[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2})',LeaseRaw,re.DOTALL)

                if LeaseRaw.find("  binding state active;")!=-1:
                    STATEraw = 'Active'
                else:
                    if LeaseRaw.find("  binding state abandoned;")!=-1:
                        STATEraw = 'Abandoned'
                    else:
                        if LeaseRaw.find("  binding state free;")!=-1:
                            STATEraw = 'Free'

                self.IscDhcpLeases.append(DhcpLease(IPraw[0],MAC,STARTraw[0],ENDSraw[0],STATEraw))
        

    #Method to find if IP was already added to the list
    def FindCurrentIp(self, ip):
        for Lease in self.IscDhcpLeases:
            if Lease.IP == ip:
                return 1
        return 0
        
        

    def PrintCurrentLeases(self):
        for Lease in reversed(sorted(self.IscDhcpLeases,key=lambda Lease: Lease.IP)):
            Lease.PrintLease()
    
    def PrintIscLeasesRaw(self):
        print self.IscDhcpLeasesRaw
                
    def GetCurrentFreeLeases(self):
        freeLeaseCount = 0
        for Lease in self.IscDhcpLeases:
            if Lease.State == 'Free':
                freeLeaseCount = freeLeaseCount + 1
        return freeLeaseCount
            
    def GetCurrentActiveLeases(self):
        activeLeaseCount = 0
        for Lease in self.IscDhcpLeases:
            if Lease.State == 'Active':
                activeLeaseCount = activeLeaseCount + 1
        return activeLeaseCount

    def GetCurrentAbandonedLeases(self):
        abandonedLeaseCount = 0
        for Lease in self.IscDhcpLeases:
            if Lease.State == 'Abandoned':
                abandonedLeaseCount = abandonedLeaseCount + 1
        return abandonedLeaseCount
                
                
                
                
print "Lease IP\t    MAC\t                     StartDate\t               EndDate"    
LEASE = IscDhcpLeases("/var/lib/dhcp/dhcpd.leases")
#LEASE.PrintIscLeasesRaw()
LEASE.PrintCurrentLeases()
print LEASE.GetCurrentFreeLeases()
print LEASE.GetCurrentActiveLeases()
print LEASE.GetCurrentAbandonedLeases()


